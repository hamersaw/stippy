# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import stip_pb2 as stip__pb2


class AlbumManagementStub(object):
    """
    AlbumManagement Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Broadcast = channel.unary_unary(
                '/stip.AlbumManagement/Broadcast',
                request_serializer=stip__pb2.AlbumBroadcastRequest.SerializeToString,
                response_deserializer=stip__pb2.AlbumBroadcastReply.FromString,
                )
        self.Close = channel.unary_unary(
                '/stip.AlbumManagement/Close',
                request_serializer=stip__pb2.AlbumCloseRequest.SerializeToString,
                response_deserializer=stip__pb2.AlbumCloseReply.FromString,
                )
        self.Create = channel.unary_unary(
                '/stip.AlbumManagement/Create',
                request_serializer=stip__pb2.AlbumCreateRequest.SerializeToString,
                response_deserializer=stip__pb2.AlbumCreateReply.FromString,
                )
        self.List = channel.unary_unary(
                '/stip.AlbumManagement/List',
                request_serializer=stip__pb2.AlbumListRequest.SerializeToString,
                response_deserializer=stip__pb2.AlbumListReply.FromString,
                )
        self.Open = channel.unary_unary(
                '/stip.AlbumManagement/Open',
                request_serializer=stip__pb2.AlbumOpenRequest.SerializeToString,
                response_deserializer=stip__pb2.AlbumOpenReply.FromString,
                )


class AlbumManagementServicer(object):
    """
    AlbumManagement Service
    """

    def Broadcast(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Close(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def List(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Open(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AlbumManagementServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Broadcast': grpc.unary_unary_rpc_method_handler(
                    servicer.Broadcast,
                    request_deserializer=stip__pb2.AlbumBroadcastRequest.FromString,
                    response_serializer=stip__pb2.AlbumBroadcastReply.SerializeToString,
            ),
            'Close': grpc.unary_unary_rpc_method_handler(
                    servicer.Close,
                    request_deserializer=stip__pb2.AlbumCloseRequest.FromString,
                    response_serializer=stip__pb2.AlbumCloseReply.SerializeToString,
            ),
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=stip__pb2.AlbumCreateRequest.FromString,
                    response_serializer=stip__pb2.AlbumCreateReply.SerializeToString,
            ),
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=stip__pb2.AlbumListRequest.FromString,
                    response_serializer=stip__pb2.AlbumListReply.SerializeToString,
            ),
            'Open': grpc.unary_unary_rpc_method_handler(
                    servicer.Open,
                    request_deserializer=stip__pb2.AlbumOpenRequest.FromString,
                    response_serializer=stip__pb2.AlbumOpenReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'stip.AlbumManagement', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AlbumManagement(object):
    """
    AlbumManagement Service
    """

    @staticmethod
    def Broadcast(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stip.AlbumManagement/Broadcast',
            stip__pb2.AlbumBroadcastRequest.SerializeToString,
            stip__pb2.AlbumBroadcastReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Close(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stip.AlbumManagement/Close',
            stip__pb2.AlbumCloseRequest.SerializeToString,
            stip__pb2.AlbumCloseReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stip.AlbumManagement/Create',
            stip__pb2.AlbumCreateRequest.SerializeToString,
            stip__pb2.AlbumCreateReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stip.AlbumManagement/List',
            stip__pb2.AlbumListRequest.SerializeToString,
            stip__pb2.AlbumListReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Open(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stip.AlbumManagement/Open',
            stip__pb2.AlbumOpenRequest.SerializeToString,
            stip__pb2.AlbumOpenReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class DataManagementStub(object):
    """
    DataManagement Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Broadcast = channel.unary_unary(
                '/stip.DataManagement/Broadcast',
                request_serializer=stip__pb2.DataBroadcastRequest.SerializeToString,
                response_deserializer=stip__pb2.DataBroadcastReply.FromString,
                )
        self.Fill = channel.unary_unary(
                '/stip.DataManagement/Fill',
                request_serializer=stip__pb2.DataFillRequest.SerializeToString,
                response_deserializer=stip__pb2.DataFillReply.FromString,
                )
        self.List = channel.unary_stream(
                '/stip.DataManagement/List',
                request_serializer=stip__pb2.DataListRequest.SerializeToString,
                response_deserializer=stip__pb2.Image.FromString,
                )
        self.Load = channel.unary_unary(
                '/stip.DataManagement/Load',
                request_serializer=stip__pb2.DataLoadRequest.SerializeToString,
                response_deserializer=stip__pb2.DataLoadReply.FromString,
                )
        self.Search = channel.unary_stream(
                '/stip.DataManagement/Search',
                request_serializer=stip__pb2.DataSearchRequest.SerializeToString,
                response_deserializer=stip__pb2.Extent.FromString,
                )
        self.Split = channel.unary_unary(
                '/stip.DataManagement/Split',
                request_serializer=stip__pb2.DataSplitRequest.SerializeToString,
                response_deserializer=stip__pb2.DataSplitReply.FromString,
                )


class DataManagementServicer(object):
    """
    DataManagement Service
    """

    def Broadcast(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Fill(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def List(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Load(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Search(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Split(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataManagementServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Broadcast': grpc.unary_unary_rpc_method_handler(
                    servicer.Broadcast,
                    request_deserializer=stip__pb2.DataBroadcastRequest.FromString,
                    response_serializer=stip__pb2.DataBroadcastReply.SerializeToString,
            ),
            'Fill': grpc.unary_unary_rpc_method_handler(
                    servicer.Fill,
                    request_deserializer=stip__pb2.DataFillRequest.FromString,
                    response_serializer=stip__pb2.DataFillReply.SerializeToString,
            ),
            'List': grpc.unary_stream_rpc_method_handler(
                    servicer.List,
                    request_deserializer=stip__pb2.DataListRequest.FromString,
                    response_serializer=stip__pb2.Image.SerializeToString,
            ),
            'Load': grpc.unary_unary_rpc_method_handler(
                    servicer.Load,
                    request_deserializer=stip__pb2.DataLoadRequest.FromString,
                    response_serializer=stip__pb2.DataLoadReply.SerializeToString,
            ),
            'Search': grpc.unary_stream_rpc_method_handler(
                    servicer.Search,
                    request_deserializer=stip__pb2.DataSearchRequest.FromString,
                    response_serializer=stip__pb2.Extent.SerializeToString,
            ),
            'Split': grpc.unary_unary_rpc_method_handler(
                    servicer.Split,
                    request_deserializer=stip__pb2.DataSplitRequest.FromString,
                    response_serializer=stip__pb2.DataSplitReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'stip.DataManagement', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataManagement(object):
    """
    DataManagement Service
    """

    @staticmethod
    def Broadcast(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stip.DataManagement/Broadcast',
            stip__pb2.DataBroadcastRequest.SerializeToString,
            stip__pb2.DataBroadcastReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Fill(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stip.DataManagement/Fill',
            stip__pb2.DataFillRequest.SerializeToString,
            stip__pb2.DataFillReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/stip.DataManagement/List',
            stip__pb2.DataListRequest.SerializeToString,
            stip__pb2.Image.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Load(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stip.DataManagement/Load',
            stip__pb2.DataLoadRequest.SerializeToString,
            stip__pb2.DataLoadReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/stip.DataManagement/Search',
            stip__pb2.DataSearchRequest.SerializeToString,
            stip__pb2.Extent.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Split(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stip.DataManagement/Split',
            stip__pb2.DataSplitRequest.SerializeToString,
            stip__pb2.DataSplitReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class NodeManagementStub(object):
    """
    NodeManagement Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.List = channel.unary_unary(
                '/stip.NodeManagement/List',
                request_serializer=stip__pb2.NodeListRequest.SerializeToString,
                response_deserializer=stip__pb2.NodeListReply.FromString,
                )


class NodeManagementServicer(object):
    """
    NodeManagement Service
    """

    def List(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NodeManagementServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=stip__pb2.NodeListRequest.FromString,
                    response_serializer=stip__pb2.NodeListReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'stip.NodeManagement', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NodeManagement(object):
    """
    NodeManagement Service
    """

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stip.NodeManagement/List',
            stip__pb2.NodeListRequest.SerializeToString,
            stip__pb2.NodeListReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class TaskManagementStub(object):
    """
    TaskManagement Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Broadcast = channel.unary_unary(
                '/stip.TaskManagement/Broadcast',
                request_serializer=stip__pb2.TaskBroadcastRequest.SerializeToString,
                response_deserializer=stip__pb2.TaskBroadcastReply.FromString,
                )
        self.List = channel.unary_unary(
                '/stip.TaskManagement/List',
                request_serializer=stip__pb2.TaskListRequest.SerializeToString,
                response_deserializer=stip__pb2.TaskListReply.FromString,
                )


class TaskManagementServicer(object):
    """
    TaskManagement Service
    """

    def Broadcast(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def List(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaskManagementServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Broadcast': grpc.unary_unary_rpc_method_handler(
                    servicer.Broadcast,
                    request_deserializer=stip__pb2.TaskBroadcastRequest.FromString,
                    response_serializer=stip__pb2.TaskBroadcastReply.SerializeToString,
            ),
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=stip__pb2.TaskListRequest.FromString,
                    response_serializer=stip__pb2.TaskListReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'stip.TaskManagement', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TaskManagement(object):
    """
    TaskManagement Service
    """

    @staticmethod
    def Broadcast(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stip.TaskManagement/Broadcast',
            stip__pb2.TaskBroadcastRequest.SerializeToString,
            stip__pb2.TaskBroadcastReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stip.TaskManagement/List',
            stip__pb2.TaskListRequest.SerializeToString,
            stip__pb2.TaskListReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
